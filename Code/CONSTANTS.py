"""
CONSTANTS

E150 Swarm of Drones Project
Solution Code

Fall Semester 2021
GSI - Brian Howell
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# CONSTANTS - Dynamics and Integration Parameters
Ai = 1                                  # |   m^2   | SCALAR - Agent characteristic area
Cdi = 0.25                              # |  none   | SCALAR - Agent coefficient of drag
mi = 10                                 # |   kg    | SCALAR - Agent mass
Fpi = 200                               # |    N    | SCALAR - Propulsion force direction
vA = np.array([0, 0, 0])                # |   m/s   | VECTOR - Velocity of surrounding air
rhoA = 1.225                            # | kg/m^3  | SCALAR - Air density
dt = 0.2                                # |    s    | SCALAR - Time step
tf = 60                                 # |    s    | SCALAR - Max task time

# CONSTANTS - Objects and Interaction Parameters
agentSight = 5                          # |    m    | SCALAR - Target mapping distance
crashRange = 2                          # |    m    | SCALAR - Agent collision distance
nM = 15                                 # |   none  | SCALAR - Number of initial agents
nO = 25                                 # |   none  | SCALAR - Number of obstacles
nT = 100                                # |   none  | SCALAR - Number of initial targets

# CONSTANTS - Genetic algorithm paraemters
children = 6                            # |   none  | SCALAR - Strings generated by breeding
parents = 6                             # |   none  | SCALAR - Surviving strings for breeding
S = 20                                  # |   none  | SCALAR - Designs per generation
G = 100                                 # |   none  | SCALAR - Total generations
w1 = 70                                 # |   none  | SCALAR - Weight of mapping in net cost
w2 = 10                                 # |   none  | SCALAR - Weight of time usage in net cost
w3 = 20                                 # |   none  | SCALAR - Weight of agent losses in net cost

# CONSTANTS - Boundaries
xB = 100                                # |    m    | SCALAR - x boundary: target
yB = 100                                # |    m    | SCALAR - y Boundary: target
zB = 10                                 # |    m    | SCALAR - z boundary: target
xMax = 150                              # |    m    | SCALAR - x boundary: lost drone
yMax = 150                              # |    m    | SCALAR - y boundary: lost drone
zMax = 60                               # |    m    | SCALAR - x boundary: lost drone

# Positions of obstacles
xO = np.random.rand(nO) * (2 * xB) - xB
yO = np.random.rand(nO) * (2 * yB) - yB
zO = np.random.rand(nO) * (2 * zB) - zB
posObs = np.array([xO, yO, zO]).T

# Positions of targets
xT = np.random.rand(nT) * (2 * xB) - xB
yT = np.random.rand(nT) * (2 * yB) - yB
zT = np.random.rand(nT) * (2 * zB) - zB
posTar = np.array([xT, yT, zT]).T

# Initial positions and velocities of drones
xM = (xMax - 0.05 * xMax) * np.ones(nM)
yM = np.linspace(-yMax + 0.05 * yMax, yMax - 0.05 * yMax, nM)
zM = np.zeros(nM)
posM = np.array([xM, yM, zM]).T
# posM[-1, :] = [151, 151, 61]
velM = np.zeros((nM, 3))


